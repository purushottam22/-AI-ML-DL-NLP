# -*- coding: utf-8 -*-
"""custom_loss

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z2JftW8h_bFkGx993WAfdqUq9rqWrJ7-
"""

import numpy as np
import tensorflow as tf

def build_model(custom_loss):
  tf.keras.backend.clear_session()
  model = tf.keras.Sequential()
  model.add(tf.keras.layers.Input(shape = 10))
  model.add(tf.keras.layers.Dense(64))
  model.add(tf.keras.layers.Dense(32))
  model.add(tf.keras.layers.Dense(1))

  model.compile(loss=custom_loss, optimizer='adam')

  return model

"""Model with custom loss

"""

def mae_mse_mix_loss(alpha):
  def loss_func(ypred, ytrue):
    mse = tf.math.reduce_mean(tf.math.squared_difference(ypred, ytrue))
    mae = tf.math.reduce_mean(tf.math.abs(tf.math.subtract(ypred, ytrue)))
    return alpha*mse + (1-alpha)*mae
  return loss_func

custom_loss = mae_mse_mix_loss(alpha=0.5)
model = build_model(custom_loss)
model.summary()

# hisory = model.fit(trainx, trainy, batch_size=32, verbose=1, epoch=10, callbacks = [store_epochs])

"""Model with custom loss changes in between epochs"""

class store_epochs(tf.keras.callbacks.Callback):
  def __init__(self, epoch):
    super().__init__()
    self.my_epoch = tf.keras.backend.variable(epoch)
  def on_epoch_begin(self, epoch):
    tf.keras.backend.set_values(self.my_epoch, epoch)

def alpha_update(epoch):
  if epoch<10:
    alpha= 1- 0.1*epoch
  else:
    alpha = 0
  return alpha

def mae_mse_varying_mix_loss():
  def loss_func(ypred, ytrue):

    alpha = alpha_update(store_epochs.my_epoch)

    mse = tf.math.reduce_mean(tf.math.squared_difference(ypred, ytrue))
    mae = tf.math.reduce_mean(tf.math.abs(tf.math.subtract(ypred, ytrue)))
    return alpha*mse + (1-alpha)*mae
  return loss_func

custom_loss = mae_mse_varying_mix_loss()
model = build_model(custom_loss)
model.summary()

# hisory = model.fit(trainx, trainy, batch_size=32, verbose=1, epoch=10, callbacks = [store_epochs])